name: DICOM Scapy Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-dicom-implementation:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dicom_server:
          - name: Orthanc
            image: orthancteam/orthanc:latest
            aet: ORTHANC_CI
            port: 4242
            command: "--verbose"

          - name: Pydicom_pynetdicom
            image: pydicom/dicom:latest
            aet: PYDICOM_SCP
            port: 11112
            command: >
              python -m pynetdicom echoscp
              --ae-title PYDICOM_SCP
              --port 11112
              -v

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # FIX: Added pynetdicom for the Pydicom_pynetdicom server test case
          pip install scapy pytest pynetdicom
          sudo apt-get update && sudo apt-get install -y tcpdump dcmtk netcat-openbsd tshark

      - name: Start tcpdump capture
        id: start_tcpdump
        run: |
          echo "Starting tcpdump capture for port ${{ matrix.dicom_server.port }}..."
          sudo tcpdump port ${{ matrix.dicom_server.port }} -i any -s 0 -w dicom_capture_${{ matrix.dicom_server.name }}.pcap &
          echo "tcpdump_pid=$!" >> $GITHUB_OUTPUT

      - name: Start DICOM SCP (${{ matrix.dicom_server.name }})
        id: start_scp
        run: |
          echo "Starting ${{ matrix.dicom_server.name }} container..."
          ENV_FLAGS=()
          if [[ "${{ matrix.dicom_server.name }}" == "Orthanc" ]]; then
            ENV_FLAGS+=("-e" "VERBOSE_ENABLED=true")
            ENV_FLAGS+=("-e" "DICOM_AET=${{ matrix.dicom_server.aet }}")
            ENV_FLAGS+=("-e" "DICOM_PORT=${{ matrix.dicom_server.port }}")
            ENV_FLAGS+=("-e" "ORTHANC__ACCEPT_UNKNOWN_PEERS=true")
          fi

          docker run \
            --detach \
            --rm \
            --name dicom-scp-test-${{ matrix.dicom_server.name }} \
            --publish ${{ matrix.dicom_server.port }}:${{ matrix.dicom_server.port }} \
            "${ENV_FLAGS[@]}" \
            ${{ matrix.dicom_server.image }} \
            ${{ matrix.dicom_server.command }}

          echo "Waiting for ${{ matrix.dicom_server.name }} (port ${{ matrix.dicom_server.port }}) to become available (max 60s)..."
          timeout 60 bash -c 'until nc -z -w 1 127.0.0.1 ${{ matrix.dicom_server.port }}; do echo -n "."; sleep 1; done'
          echo " Port detected as open."
          sleep 2 # Extra grace time for the server to initialize fully

      - name: Run echoscu Test against ${{ matrix.dicom_server.name }}
        run: |
          echo "Running echoscu -v -aet SCAPY_CI_SCU -aec ${{ matrix.dicom_server.aet }} 127.0.0.1 ${{ matrix.dicom_server.port }}"
          timeout 15 echoscu -v -aet SCAPY_CI_SCU -aec ${{ matrix.dicom_server.aet }} 127.0.0.1 ${{ matrix.dicom_server.port }} \
            || echo "::warning::echoscu command failed or timed out."

      - name: Run Pytest Integration Tests against ${{ matrix.dicom_server.name }}
        id: test_script
        continue-on-error: true # Keep this so subsequent cleanup steps always run
        run: |
          TIMEOUT=20 # Default timeout
          if [[ "${{ matrix.dicom_server.name }}" == "Orthanc" ]]; then
            TIMEOUT=45 # Increase timeout for Orthanc
          fi
          echo "Using timeout: $TIMEOUT seconds"

          # FIX: Use pytest to run the tests, not python. Use the correct filename.
          # FIX: Added -sv for verbose output and to show print statements.
          pytest test_dicom.py \
            --ip 127.0.0.1 \
            --port ${{ matrix.dicom_server.port }} \
            --ae-title ${{ matrix.dicom_server.aet }} \
            --calling-ae SCAPY_CI_SCU \
            --timeout $TIMEOUT \
            -sv

      - name: Stop tcpdump capture
        if: always()
        run: |
          echo "Stopping tcpdump (PID: ${{ steps.start_tcpdump.outputs.tcpdump_pid }})..."
          if [ -n "${{ steps.start_tcpdump.outputs.tcpdump_pid }}" ]; then
            sudo kill ${{ steps.start_tcpdump.outputs.tcpdump_pid }} || echo "tcpdump already stopped."
          fi
          sleep 2

      - name: Print PCAP Info (${{ matrix.dicom_server.name }})
        if: always()
        run: |
          PCAP_FILE="dicom_capture_${{ matrix.dicom_server.name }}.pcap"
          if [[ -f "$PCAP_FILE" ]]; then
            echo "--- PCAP Info for $PCAP_FILE ---"
            tshark -r "$PCAP_FILE" -c 400 -V
          else
            echo "PCAP file $PCAP_FILE not found."
          fi
        continue-on-error: true

      - name: Upload pcap artifact (${{ matrix.dicom_server.name }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dicom-pcap-capture-${{ matrix.dicom_server.name }}
          path: dicom_capture_${{ matrix.dicom_server.name }}.pcap
          if-no-files-found: ignore

      - name: Show ${{ matrix.dicom_server.name }} Logs (Final)
        if: always()
        run: |
          echo "--- ${{ matrix.dicom_server.name }} SCP Logs (Final) ---"
          docker logs dicom-scp-test-${{ matrix.dicom_server.name }} || echo "Could not get logs for ${{ matrix.dicom_server.name }}."

      - name: Stop ${{ matrix.dicom_server.name }} Container
        if: always()
        run: |
          echo "Stopping ${{ matrix.dicom_server.name }} SCP container..."
          docker stop dicom-scp-test-${{ matrix.dicom_server.name }} || echo "${{ matrix.dicom_server.name }} container already stopped."

      - name: Check test script outcome for ${{ matrix.dicom_server.name }}
        if: steps.test_script.outcome != 'success'
        run: |
          echo "::error::Pytest script failed for ${{ matrix.dicom_server.name }}!"
          exit 1