name: DICOM Scapy Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-dicom-implementation:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dicom_server:
          - name: Orthanc
            image: orthancteam/orthanc:latest
            aet: ORTHANC_CI
            port: 4242
            # Simplify command - remove potentially problematic config path argument
            command: "--verbose"

          - name: Pydicom_pynetdicom
            image: pydicom/dicom:latest
            aet: PYDICOM_SCP
            port: 11112
            command: >
              python -m pynetdicom echoscp
              --ae-title PYDICOM_SCP
              --port 11112
              -v

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scapy
          sudo apt-get update && sudo apt-get install -y tcpdump

          - name: Start tcpdump capture
          id: start_tcpdump
          run: |
            echo "Starting tcpdump capture for port ${{ matrix.dicom_server.port }}..."
            sudo tcpdump port ${{ matrix.dicom_server.port }} -i any -s 0 -w dicom_capture_${{ matrix.dicom_server.name }}.pcap &
            echo "tcpdump_pid=$!" >> $GITHUB_OUTPUT
  
      - name: Start DICOM SCP (${{ matrix.dicom_server.name }})
        id: start_scp
        run: |
          echo "Starting ${{ matrix.dicom_server.name }} container..."
          # Build ENV flags array dynamically
          ENV_FLAGS=()
          if [[ "${{ matrix.dicom_server.name }}" == "Orthanc" ]]; then
            ENV_FLAGS+=("-e" "VERBOSE_ENABLED=true")
            ENV_FLAGS+=("-e" "DICOM_AET=${{ matrix.dicom_server.aet }}")
            ENV_FLAGS+=("-e" "DICOM_PORT=${{ matrix.dicom_server.port }}")
            ENV_FLAGS+=("-e" "ORTHANC__ACCEPT_UNKNOWN_PEERS=true")
          fi
          echo "Using Env Vars: ${ENV_FLAGS[@]}"
          echo "Using Command: ${{ matrix.dicom_server.command }}"

          docker run \
            --detach \
            --rm \
            --name dicom-scp-test-${{ matrix.dicom_server.name }} \
            --publish ${{ matrix.dicom_server.port }}:${{ matrix.dicom_server.port }} \
            "${ENV_FLAGS[@]}" \
            ${{ matrix.dicom_server.image }} \
            ${{ matrix.dicom_server.command }} \
            || { echo "::error::Failed to start container ${{ matrix.dicom_server.name }}"; exit 1; }

          # === Corrected Port Check Logic ===
          echo "Waiting for ${{ matrix.dicom_server.name }} (port ${{ matrix.dicom_server.port }}) to become available..."
          # Use a temporary file for loop status to avoid complex inline error handling
          touch loop_status_ok.txt
          if ! timeout 60 bash -c '
              while ! printf "" > /dev/tcp/127.0.0.1/${{ matrix.dicom_server.port }}; do
                sleep 0.5;
                # Check if container is still running
                if ! docker ps --filter name=dicom-scp-test-${{ matrix.dicom_server.name }} --format "{{.ID}}" | grep -q .; then
                  echo "::error::Container exited while waiting for port." >&2
                  rm loop_status_ok.txt # Signal failure
                  exit 1 # Exit the subshell loop
                fi
              done'; then
              # This block executes if timeout occurs OR if the inner loop exited with error (container gone)
              if [[ -f loop_status_ok.txt ]]; then
                # Timeout occurred, container was likely still running
                echo "::error::Timeout waiting for port ${{ matrix.dicom_server.port }} to open." >&2
              fi
              rm -f loop_status_ok.txt # Clean up status file
              # Try to get logs even on failure
              echo "Attempting to get logs on failure..." >&2
              docker logs dicom-scp-test-${{ matrix.dicom_server.name }} || echo "Could not retrieve logs on failure." >&2
              exit 1 # Fail the step
          fi
          rm -f loop_status_ok.txt # Clean up status file on success

          echo "${{ matrix.dicom_server.name }} port is open and container appears running."
          sleep 2

      - name: Show ${{ matrix.dicom_server.name }} Logs (Post-Start)
        if: always() && steps.start_scp.outcome == 'success'
        run: |
          echo "--- ${{ matrix.dicom_server.name }} SCP Logs (Post-Start Check) ---"
          docker logs dicom-scp-test-${{ matrix.dicom_server.name }} || echo "Could not get logs for ${{ matrix.dicom_server.name }} (Post-Start)."

      - name: Run DICOM Integration Test Script against ${{ matrix.dicom_server.name }}
        id: test_script
        continue-on-error: true
        run: |
          # === Add timeout argument, especially for Orthanc ===
          TIMEOUT=20 # Default timeout
          if [[ "${{ matrix.dicom_server.name }}" == "Orthanc" ]]; then
            TIMEOUT=45 # Increase timeout for Orthanc
          fi
          echo "Using timeout: $TIMEOUT seconds"

          # Assuming test_integration.py is in the repo root
          # NOTE: You might need to add --timeout $TIMEOUT to test_integration.py arguments first!
          python test_integration.py \
            --ip 127.0.0.1 \
            --port ${{ matrix.dicom_server.port }} \
            --ae-title ${{ matrix.dicom_server.aet }} \
            --calling-ae SCAPY_CI_SCU \
            --timeout $TIMEOUT \
            --debug

      - name: Stop tcpdump capture
        if: always()
        run: |
          echo "Stopping tcpdump (PID: ${{ steps.start_tcpdump.outputs.tcpdump_pid }})..."
          if [ -n "${{ steps.start_tcpdump.outputs.tcpdump_pid }}" ]; then
            sudo kill ${{ steps.start_tcpdump.outputs.tcpdump_pid }} || echo "tcpdump already stopped or kill failed."
            sleep 2
            sudo kill -0 ${{ steps.start_tcpdump.outputs.tcpdump_pid }} 2>/dev/null && sudo kill -9 ${{ steps.start_tcpdump.outputs.tcpdump_pid }} || echo "tcpdump cleanly stopped."
          else
            echo "tcpdump PID not found in step outputs."
          fi
          sleep 2

      - name: Upload pcap artifact (${{ matrix.dicom_server.name }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dicom-pcap-capture-${{ matrix.dicom_server.name }}
          path: dicom_capture_${{ matrix.dicom_server.name }}.pcap
          if-no-files-found: ignore

      - name: Show ${{ matrix.dicom_server.name }} Logs (Final)
        if: always()
        run: |
          echo "--- ${{ matrix.dicom_server.name }} SCP Logs (Final) ---"
          docker logs dicom-scp-test-${{ matrix.dicom_server.name }} || echo "Could not get logs for ${{ matrix.dicom_server.name }} (Final)."

      - name: Stop ${{ matrix.dicom_server.name }} Container
        if: always()
        run: |
          echo "Stopping ${{ matrix.dicom_server.name }} SCP container..."
          docker stop dicom-scp-test-${{ matrix.dicom_server.name }} || echo "${{ matrix.dicom_server.name }} container already stopped or could not be stopped."

      - name: Check test script outcome for ${{ matrix.dicom_server.name }}
        if: steps.test_script.outcome != 'success'
        run: |
          echo "Test script failed for ${{ matrix.dicom_server.name }}!"
          exit 1