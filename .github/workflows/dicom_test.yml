name: DICOM Scapy Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-dicom-implementation:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dicom_server:
          - name: Orthanc
            image: orthancteam/orthanc:latest
            aet: ORTHANC_CI
            port: 4242
            # Simplify command - remove potentially problematic config path argument
            command: "--verbose"

          - name: Pydicom_pynetdicom
            image: pydicom/dicom:latest
            aet: PYDICOM_SCP
            port: 11112
            command: >
              python -m pynetdicom echoscp
              --ae-title PYDICOM_SCP
              --port 11112
              -v

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scapy
          sudo apt-get update && sudo apt-get install -y tcpdump

      # - name: Log in to Docker Hub ... (Optional)

      - name: Start tcpdump capture
        id: start_tcpdump
        run: |
          echo "Starting tcpdump capture for port ${{ matrix.dicom_server.port }}..."
          sudo tcpdump port ${{ matrix.dicom_server.port }} -i any -s 0 -w dicom_capture_${{ matrix.dicom_server.name }}.pcap &
          echo "tcpdump_pid=$!" >> $GITHUB_OUTPUT

      - name: Start DICOM SCP (${{ matrix.dicom_server.name }})
        id: start_scp # Give this step an ID
        run: |
          echo "Starting ${{ matrix.dicom_server.name }} container..."
          # Build ENV flags array dynamically
          ENV_FLAGS=()
          if [[ "${{ matrix.dicom_server.name }}" == "Orthanc" ]]; then
            ENV_FLAGS+=("-e" "VERBOSE_ENABLED=true")
            ENV_FLAGS+=("-e" "DICOM_AET=${{ matrix.dicom_server.aet }}")
            ENV_FLAGS+=("-e" "DICOM_PORT=${{ matrix.dicom_server.port }}")
            ENV_FLAGS+=("-e" "ORTHANC__ACCEPT_UNKNOWN_PEERS=true")
          fi
          echo "Using Env Vars: ${ENV_FLAGS[@]}"
          echo "Using Command: ${{ matrix.dicom_server.command }}"

          # Use standard Docker SDK exit codes where possible
          docker run \
            --detach \
            --rm \
            --name dicom-scp-test-${{ matrix.dicom_server.name }} \
            --publish ${{ matrix.dicom_server.port }}:${{ matrix.dicom_server.port }} \
            "${ENV_FLAGS[@]}" \
            ${{ matrix.dicom_server.image }} \
            ${{ matrix.dicom_server.command }} \
            || { echo "::error::Failed to start container ${{ matrix.dicom_server.name }}"; exit 1; } # Exit if docker run fails

          # Wait for the port to be open before proceeding
          echo "Waiting for ${{ matrix.dicom_server.name }} (port ${{ matrix.dicom_server.port }}) to become available..."
          timeout 60 bash -c 'until printf "" > /dev/tcp/127.0.0.1/${{ matrix.dicom_server.port }}; do sleep 0.5; docker ps --filter name=dicom-scp-test-${{ matrix.dicom_server.name }} --format "{{.ID}}" | grep -q . || { echo "::error::Container exited while waiting for port."; exit 1; } ; done' \
            || (echo "::error::Timeout or container exit waiting for port ${{ matrix.dicom_server.port }}"; docker logs dicom-scp-test-${{ matrix.dicom_server.name }} &> >(tee startup_logs_${{ matrix.dicom_server.name }}.txt); exit 1)
            # Also check if container is still running inside the loop ^^^
            # Capture logs on timeout/exit ^^^

          echo "${{ matrix.dicom_server.name }} port is open and container appears running."
          sleep 2 # Short extra grace period

      # *** NEW STEP: Show logs immediately after port check ***
      - name: Show ${{ matrix.dicom_server.name }} Logs (Post-Start)
        if: always() && steps.start_scp.outcome == 'success' # Only run if start step thinks it succeeded
        run: |
          echo "--- ${{ matrix.dicom_server.name }} SCP Logs (Post-Start Check) ---"
          docker logs dicom-scp-test-${{ matrix.dicom_server.name }} || echo "Could not get logs for ${{ matrix.dicom_server.name }} (Post-Start)."

      - name: Run DICOM Integration Test Script against ${{ matrix.dicom_server.name }}
        id: test_script
        continue-on-error: true
        run: |
          # Assuming test_integration.py is in the repo root now based on previous fix
          python test_integration.py \
            --ip 127.0.0.1 \
            --port ${{ matrix.dicom_server.port }} \
            --ae-title ${{ matrix.dicom_server.aet }} \
            --calling-ae SCAPY_CI_SCU \
            --debug

      # ... (rest of the steps: stop tcpdump, upload artifact, final logs, stop container, check outcome) ...

      - name: Stop tcpdump capture
        if: always()
        run: |
          # ... (tcpdump stop logic as before) ...
          echo "Stopping tcpdump (PID: ${{ steps.start_tcpdump.outputs.tcpdump_pid }})..."
          if [ -n "${{ steps.start_tcpdump.outputs.tcpdump_pid }}" ]; then
            sudo kill ${{ steps.start_tcpdump.outputs.tcpdump_pid }} || echo "tcpdump already stopped or kill failed."
            sleep 2
            sudo kill -0 ${{ steps.start_tcpdump.outputs.tcpdump_pid }} 2>/dev/null && sudo kill -9 ${{ steps.start_tcpdump.outputs.tcpdump_pid }} || echo "tcpdump cleanly stopped."
          else
            echo "tcpdump PID not found in step outputs."
          fi
          sleep 2

      - name: Upload pcap artifact (${{ matrix.dicom_server.name }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dicom-pcap-capture-${{ matrix.dicom_server.name }}
          path: dicom_capture_${{ matrix.dicom_server.name }}.pcap
          if-no-files-found: ignore

      - name: Show ${{ matrix.dicom_server.name }} Logs (Final)
        if: always()
        run: |
          echo "--- ${{ matrix.dicom_server.name }} SCP Logs (Final) ---"
          # Attempt to show logs captured on timeout/exit first
          if [[ -f "startup_logs_${{ matrix.dicom_server.name }}.txt" ]]; then
            echo "Captured startup logs:"
            cat startup_logs_${{ matrix.dicom_server.name }}.txt
          fi
          # Then try getting live logs
          docker logs dicom-scp-test-${{ matrix.dicom_server.name }} || echo "Could not get live logs for ${{ matrix.dicom_server.name }} (Final)."

      - name: Stop ${{ matrix.dicom_server.name }} Container
        if: always()
        run: |
          echo "Stopping ${{ matrix.dicom_server.name }} SCP container..."
          docker stop dicom-scp-test-${{ matrix.dicom_server.name }} || echo "${{ matrix.dicom_server.name }} container already stopped or could not be stopped."

      - name: Check test script outcome for ${{ matrix.dicom_server.name }}
        if: steps.test_script.outcome != 'success'
        run: |
          echo "Test script failed for ${{ matrix.dicom_server.name }}!"
          exit 1