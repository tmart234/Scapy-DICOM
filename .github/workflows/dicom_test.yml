name: DICOM Scapy Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-dicom-implementation:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dicom_server:
          - name: Orthanc
            image: orthancteam/orthanc:latest 
            aet: ORTHANC_CI
            port: 4242
            env_vars: "-e VERBOSE_ENABLED=true -e DICOM_AET={aet} -e DICOM_PORT={port}" # Simplified env var handling
            command: "--verbose"

          - name: Pydicom_pynetdicom
            image: pydicom/dicom:latest
            aet: PYDICOM_SCP
            port: 11112
            env_vars: "" 

            command: >
              python -m pynetdicom storescp
              --ae-title PYDICOM_SCP
              --port 11112
              --implement-verification

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scapy  # Assuming your scapy_DICOM.py is in the repo
          sudo apt-get update && sudo apt-get install -y tshark

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start tcpdump capture
        id: start_tcpdump
        run: |
          echo "Available network interfaces:"
          ip addr show
          echo "----------"
          sudo tcpdump -D
          # Capture on 'any' interface for any relevant port (more robust for matrix)
          sudo tcpdump port ${{ matrix.dicom_server.port }} -i any -s 0 -w dicom_capture_${{ matrix.dicom_server.name }}.pcap &
          echo "tcpdump_pid=$!" >> $GITHUB_OUTPUT

      - name: Start DICOM SCP (${{ matrix.dicom_server.name }})
        run: |
          echo "Starting ${{ matrix.dicom_server.name }} container..."
          # Replace AET and Port in env_vars string template
          ENV_VARS_PROCESSED=$(echo "${{ matrix.dicom_server.env_vars }}" | sed 's/{aet}/${{ matrix.dicom_server.aet }}/g' | sed 's/{port}/${{ matrix.dicom_server.port }}/g')
          echo "Using Env Vars: $ENV_VARS_PROCESSED"
          echo "Using Command: ${{ matrix.dicom_server.command }}"

          docker run \
            --detach \
            --rm \
            --name dicom-scp-test-${{ matrix.dicom_server.name }} \
            --publish ${{ matrix.dicom_server.port }}:${{ matrix.dicom_server.port }} \
            $ENV_VARS_PROCESSED \
            ${{ matrix.dicom_server.image }} \
            ${{ matrix.dicom_server.command }}

          echo "Waiting for ${{ matrix.dicom_server.name }} to start..."
          sleep 15 # Allow more time for potentially slower SCPs

          echo "Checking if container is running..."
          docker ps --filter name=dicom-scp-test-${{ matrix.dicom_server.name }}
          # Add a small delay after check to ensure service inside is ready
          sleep 5

      - name: Run DICOM Integration Test Script against ${{ matrix.dicom_server.name }}
        id: test_script
        continue-on-error: true
        run: |
          python test_integration.py \
            --ip 127.0.0.1 \
            --port ${{ matrix.dicom_server.port }} \
            --ae-title ${{ matrix.dicom_server.aet }} \
            --calling-ae SCAPY_CI_SCU \
            --debug

      - name: Stop tcpdump capture
        if: always()
        run: |
          echo "Stopping tcpdump (PID: ${{ steps.start_tcpdump.outputs.tcpdump_pid }})..."
          if [ -n "${{ steps.start_tcpdump.outputs.tcpdump_pid }}" ]; then
            sudo kill ${{ steps.start_tcpdump.outputs.tcpdump_pid }} || echo "tcpdump (PID: ${{ steps.start_tcpdump.outputs.tcpdump_pid }}) already stopped or kill failed."
          else
            echo "tcpdump PID not found in step outputs."
          fi
          sleep 2

      - name: Upload pcap artifact (${{ matrix.dicom_server.name }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dicom-pcap-capture-${{ matrix.dicom_server.name }} # Unique name per server
          path: dicom_capture_${{ matrix.dicom_server.name }}.pcap

      - name: Show ${{ matrix.dicom_server.name }} Logs
        if: always()
        run: |
           echo "--- ${{ matrix.dicom_server.name }} SCP Logs ---"
           sleep 2
           docker logs dicom-scp-test-${{ matrix.dicom_server.name }} || echo "Could not get logs for ${{ matrix.dicom_server.name }}."


      - name: Stop ${{ matrix.dicom_server.name }} Container
        if: always()
        run: |
          echo "Stopping ${{ matrix.dicom_server.name }} SCP container..."
          docker stop dicom-scp-test-${{ matrix.dicom_server.name }} || echo "${{ matrix.dicom_server.name }} container already stopped or could not be stopped."

      # Fail the overall job if the test script step failed FOR THIS MATRIX ENTRY
      - name: Check test script outcome for ${{ matrix.dicom_server.name }}
        if: steps.test_script.outcome != 'success'
        run: |
          echo "Test script failed for ${{ matrix.dicom_server.name }}!"
          exit 1