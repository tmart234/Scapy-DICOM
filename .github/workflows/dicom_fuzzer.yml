# .github/workflows/main.yml
name: DICOM Fuzzer CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  fuzz-dicom-server: # Renamed job for clarity
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dicom_server:
          - name: Orthanc
            image: orthancteam/orthanc:24.3.2 # Using a specific version
            aet: ORTHANC_FUZZ
            port: 4242
            command: "--verbose --logfile=/var/log/orthanc.log" # Log to file for easier retrieval

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: main_repo # Checkout to a specific path

      # Optional: If scapy_DICOM.py is in a submodule or another repo
      # - name: Checkout scapy_DICOM module
      #   uses: actions/checkout@v4
      #   with:
      #     repository: your_username/scapy-dicom-module-repo # If it's separate
      #     path: scapy_dicom_module

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Updated Python

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd main_repo # Navigate into the checked-out repository path
          pip install scapy pydicom 
          sudo apt-get update && sudo apt-get install -y tcpdump dcmtk netcat-openbsd tshark coreutils

      - name: Start DICOM SCP (${{ matrix.dicom_server.name }})
        id: start_scp
        working-directory: main_repo # Ensure commands run in the correct context
        run: |
          echo "Starting ${{ matrix.dicom_server.name }} container..."
          ENV_FLAGS=()
          if [[ "${{ matrix.dicom_server.name }}" == "Orthanc" ]]; then
            ENV_FLAGS+=("-e" "VERBOSE_ENABLED=true")
            ENV_FLAGS+=("-e" "DICOM_AET=${{ matrix.dicom_server.aet }}")
            ENV_FLAGS+=("-e" "DICOM_PORT=${{ matrix.dicom_server.port }}")
            ENV_FLAGS+=("-e" "ORTHANC__REGISTERED_USERS={ \"fuzzuser\": \"fuzzpass\" }") # Example Orthanc config
            ENV_FLAGS+=("-e" "ORTHANC__REMOTE_ACCESS_ALLOWED=true")
            ENV_FLAGS+=("-e" "ORTHANC__AUTHENTICATION_ENABLED=false") # Easier for testing, but be careful
            ENV_FLAGS+=("-e" "ORTHANC__ACCEPT_UNKNOWN_PEERS=true") # Critical for fuzzing from various AEs
            # Map Orthanc log file for easier access
            ENV_FLAGS+=("-v" "${PWD}/orthanc_logs:/var/log/orthanc")
            mkdir -p ${PWD}/orthanc_logs
          fi

          docker run \
            --detach \
            --rm \
            --name dicom-scp-fuzz-${{ matrix.dicom_server.name }} \
            --publish ${{ matrix.dicom_server.port }}:${{ matrix.dicom_server.port }} \
            "${ENV_FLAGS[@]}" \
            ${{ matrix.dicom_server.image }} \
            ${{ matrix.dicom_server.command }}
          # ... (rest of SCP startup and port check logic, ensure it's robust) ...
          echo "Waiting for ${{ matrix.dicom_server.name }} (port ${{ matrix.dicom_server.port }}) (max 90s)..."
          timeout 90 bash -c 'until nc -z -w 1 127.0.0.1 ${{ matrix.dicom_server.port }}; do echo -n "."; sleep 1; done'
          echo " Port detected as open."
          sleep 5 # Extra grace time

      - name: Prepare fuzzed DCM file for C-STORE mode
        id: prepare_fuzzed_file
        working-directory: main_repo
        run: |
          mkdir -p sample_files_for_fuzzing
          # Assume 'sample_files/valid_ct.dcm' exists in your repo (main_repo/sample_files/valid_ct.dcm)
          if [ ! -f sample_files/valid_ct.dcm ]; then
            echo "::error::sample_files/valid_ct.dcm not found! Please commit a sample DICOM file."
            exit 1
          fi
          cp sample_files/valid_ct.dcm sample_files_for_fuzzing/fuzzed_input.dcm
          
          # Basic fuzzing: append some garbage data
          echo "This is fuzzed trailer data $$$$%%%%^^^&&&****(())...." >> sample_files_for_fuzzing/fuzzed_input.dcm
          # Or use dd to overwrite a section if file is large enough
          FILESIZE=$(stat -c%s "sample_files_for_fuzzing/fuzzed_input.dcm")
          if [ "$FILESIZE" -gt 1024 ]; then # Example: only if larger than 1KB
             dd if=/dev/urandom of=sample_files_for_fuzzing/fuzzed_input.dcm bs=128 count=1 seek=$(( (RANDOM % (FILESIZE/256))*128 )) conv=notrunc status=none
          fi
          echo "FUZZED_DCM_PATH=${PWD}/sample_files_for_fuzzing/fuzzed_input.dcm" >> $GITHUB_OUTPUT
          echo "Prepared fuzzed file at ${{ steps.prepare_fuzzed_file.outputs.FUZZED_DCM_PATH }}"

      - name: Run DICOM Fuzzer (Association Mode)
        working-directory: main_repo # Ensure script is found
        run: |
          python dicom_fuzzer.py \
            --ip 127.0.0.1 \
            --port ${{ matrix.dicom_server.port }} \
            --ae-title ${{ matrix.dicom_server.aet }} \
            --calling-ae "FUZZ_ASSOC_SCU" \
            --mode association \
            --timeout 15 \
            --debug
        continue-on-error: true # Fuzzing might intentionally cause server errors/disconnects

      - name: Run DICOM Fuzzer (C-STORE File Mode)
        working-directory: main_repo
        run: |
          python dicom_fuzzer.py \
            --ip 127.0.0.1 \
            --port ${{ matrix.dicom_server.port }} \
            --ae-title ${{ matrix.dicom_server.aet }} \
            --calling-ae "FUZZ_CSTORE_SCU" \
            --mode cstore_file \
            --fuzzed-file ${{ steps.prepare_fuzzed_file.outputs.FUZZED_DCM_PATH }} \
            --timeout 30 \
            --debug
        continue-on-error: true # Allow script to "fail" if server crashes/rejects

      # --- Cleanup and Artifacts ---
      # (No tcpdump in this simplified version to focus on fuzz script, add back if needed)

      - name: Show ${{ matrix.dicom_server.name }} Logs (Final)
        if: always()
        working-directory: main_repo
        run: |
          echo "--- ${{ matrix.dicom_server.name }} SCP Logs (Final) ---"
          # Try to get logs from mapped volume first if Orthanc
          if [[ -d "${PWD}/orthanc_logs" ]]; then
            echo "Orthanc log file from volume:"
            cat ${PWD}/orthanc_logs/orthanc.log || echo "Could not cat orthanc.log from volume."
          fi
          echo "Docker container logs:"
          docker logs dicom-scp-fuzz-${{ matrix.dicom_server.name }} || echo "Could not get docker logs for ${{ matrix.dicom_server.name }}."
        continue-on-error: true

      - name: Stop ${{ matrix.dicom_server.name }} Container
        if: always()
        run: |
          docker stop dicom-scp-fuzz-${{ matrix.dicom_server.name }} || echo "Container already stopped."