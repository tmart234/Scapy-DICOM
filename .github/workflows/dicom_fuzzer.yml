# .github/workflows/dicom_fuzzer.yml
name: DICOM Fuzzer CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  fuzz-dicom-server:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dicom_server:
          - name: Orthanc
            image: orthancteam/orthanc:24.3.2
            aet: ORTHANC_FUZZ
            port: 4242
            command: "--verbose"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: main_repo

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scapy pydicom pytest
          # Make apt-get more robust to avoid lock issues
          for i in {1..5}; do sudo apt-get update && sudo apt-get install -y dcmtk netcat-openbsd && break || sleep 15; done

      - name: Start DICOM SCP (${{ matrix.dicom_server.name }})
        working-directory: main_repo
        run: |
          echo "Starting ${{ matrix.dicom_server.name }} container..."
          docker run \
            --detach \
            --rm \
            --name dicom-scp-fuzz-${{ matrix.dicom_server.name }} \
            --publish ${{ matrix.dicom_server.port }}:${{ matrix.dicom_server.port }} \
            -e "ORTHANC__REGISTERED_USERS={}" \
            -e "ORTHANC__AUTHENTICATION_ENABLED=false" \
            -e "ORTHANC__REMOTE_ACCESS_ALLOWED=true" \
            -e "DICOM_AET=${{ matrix.dicom_server.aet }}" \
            -e "DICOM_PORT=${{ matrix.dicom_server.port }}" \
            ${{ matrix.dicom_server.image }} \
            ${{ matrix.dicom_server.command }}
          
          echo "Waiting for ${{ matrix.dicom_server.name }} (port ${{ matrix.dicom_server.port }}) (max 90s)..."
          timeout 90 bash -c 'until nc -z -w 1 127.0.0.1 ${{ matrix.dicom_server.port }}; do echo -n "."; sleep 1; done'
          echo " Port detected as open."
          sleep 5 # Extra grace time

      - name: Prepare fuzzed DCM file for C-STORE mode
        id: prepare_fuzzed_file
        working-directory: main_repo
        run: |
          SAMPLE_DIR="sample_files_for_fuzzing"
          FUZZED_FILE_PATH="${PWD}/${SAMPLE_DIR}/fuzzed_input.dcm"
          mkdir -p ${SAMPLE_DIR}
          
          # Download a sample file if it doesn't exist to make CI self-contained
          if [ ! -f "${SAMPLE_DIR}/valid_ct.dcm" ]; then
            echo "::notice::Downloading sample DICOM file for fuzzing base."
            curl -L "https://github.com/pydicom/pydicom/raw/main/pydicom/data/test_files/CT_small.dcm" -o "${SAMPLE_DIR}/valid_ct.dcm"
          fi
          
          cp "${SAMPLE_DIR}/valid_ct.dcm" "${FUZZED_FILE_PATH}"
          
          # Basic fuzzing: append some garbage data
          echo "This is fuzzed trailer data" >> "${FUZZED_FILE_PATH}"
          
          echo "FUZZED_DCM_PATH=${FUZZED_FILE_PATH}" >> $GITHUB_OUTPUT
          # FIX: Use a shell variable for logging within the same step
          echo "Prepared fuzzed file at ${FUZZED_FILE_PATH}"

      - name: Run Pytest Validation Suite
        env:
          # FIX: Add main_repo to PYTHONPATH to resolve ModuleNotFoundError
          PYTHONPATH: ${{ github.workspace }}/main_repo
        run: |
          pytest ${{ github.workspace }}/main_repo/test_dicom_layer.py -v

      - name: Run DICOM Fuzzer (Association Mode)
        env:
          # FIX: Add main_repo to PYTHONPATH
          PYTHONPATH: ${{ github.workspace }}/main_repo
        run: |
          python ${{ github.workspace }}/main_repo/dicom_fuzzer.py \
            --ip 127.0.0.1 \
            --port ${{ matrix.dicom_server.port }} \
            --ae-title ${{ matrix.dicom_server.aet }} \
            --calling-ae "FUZZ_ASSOC_SCU" \
            --mode association \
            --timeout 15 \
            --debug
        continue-on-error: true

      - name: Run DICOM Fuzzer (C-STORE File Mode)
        env:
          # FIX: Add main_repo to PYTHONPATH
          PYTHONPATH: ${{ github.workspace }}/main_repo
        run: |
          python ${{ github.workspace }}/main_repo/dicom_fuzzer.py \
            --ip 127.0.0.1 \
            --port ${{ matrix.dicom_server.port }} \
            --ae-title ${{ matrix.dicom_server.aet }} \
            --calling-ae "FUZZ_CSTORE_SCU" \
            --mode cstore_file \
            --fuzzed-file "${{ steps.prepare_fuzzed_file.outputs.FUZZED_DCM_PATH }}" \
            --timeout 30 \
            --debug
        continue-on-error: true

      - name: Show ${{ matrix.dicom_server.name }} Logs
        if: always()
        run: |
          echo "--- ${{ matrix.dicom_server.name }} SCP Logs ---"
          docker logs dicom-scp-fuzz-${{ matrix.dicom_server.name }} || echo "Could not get docker logs."
        continue-on-error: true

      - name: Stop ${{ matrix.dicom_server.name }} Container
        if: always()
        run: |
          docker stop dicom-scp-fuzz-${{ matrix.dicom_server.name }} || echo "Container already stopped."
